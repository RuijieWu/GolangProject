/*
 * @Author: JeRyWu 1365840492@qq.com
 * @Date: 2022-09-28 22:00:42
 * @LastEditors: JeRyWu 1365840492@qq.com
 * @LastEditTime: 2022-09-29 17:26:25
 * @FilePath: /GoDownloader/GoDownloader.go
 * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
 */
package main

import (
	"bufio"
	"fmt"
	"io/ioutil"
	"net/http"

	//	"net/url"
	"os"
	// "path/filepath"
	// "runtime"
	// "sync"
)

const (
	NormalRespCode = "206 Partial Content"
	ErrRespCode    = "416 Requested Range Not Satifiable"
)

/*
	func getlen(url string) int64 {
		response, err := http.Get(url)
		if err != nil {
			fmt.Println("Errow", err)
			return 0
		}
		filesize := response.Header.Get("Content-Length")
		return filesize
	}
*/
func directdownload(url string) string {
	response, err := http.Get(url)
	if err != nil {
		fmt.Println("Errow", err)
		return "error"
	}
	fmt.Println("文件大小为", response.Header.Get("Content-Length"), " Bytes") //找了好久才找到访问响应头这个字段的方法，裂开了
	data, err := ioutil.ReadAll(response.Body)
	if err != nil {
		fmt.Println("Errow", err)
		return "error"
	}
	return string(data)
}
func render(filepath, data string) {
	file, err := os.OpenFile(filepath, os.O_WRONLY|os.O_CREATE, 0666)
	if err != nil {
		fmt.Println("文件打开失败", err)
	}
	//及时关闭file句柄
	defer file.Close()
	//写入文件时，使用带缓存的 *Writer
	write := bufio.NewWriter(file)
	write.WriteString(data)
	//Flush将缓存的文件真正写入到文件中
	write.Flush()
}

/*
func checkrq(url string) bool {
	response, err := http.Head(url)
	if err != nil {
		fmt.Println("Errow", err)
		return false
	}
	if response.StatusCode == http.StatusOK && response.Header.Get("Accept-Ranges") == "bytes" {
		return true
	}
}
*/
/*func multidownload(start, end, num int url , path string) {
	mutiurl = url + "/Range:bytes=" + string(start) + "-" + string(end)
    savepath = path + string(num)
	data = directdownload(mutiurl)

}
var wait sync.WaitGroup*/
func main() {
	var url, filepath, data string
	fmt.Println()
	fmt.Scanln(&url)
	fmt.Println()
	fmt.Scanln(&filepath)
	/*	if checkrq(url) {
			filesize := getlen(url)
			cores := runtime.NumCPU()
			for icount := 1; icount <= cores; icount++ {
				start := (filesize / cores) * (icount - 1)
				end := (filesize / cores) * icount
				wait.Add(1)
				go multidownload(start, end, icount)
			}
			wait.Wait()
		} else {
			fmt.Println("It cannot be downloaded by breakpoint resume method")*/
	data = directdownload(url)
	render(filepath, data)
	//}
}
